type AssetDisplayForUpload = record {
  raw_asset_index : nat16;
  asset_view : text;
  reveal_category : text;
  display_index : nat16;
};
type AssetView = record {
  hidden : bool;
  default : bool;
  view_name : text;
  priority : nat8;
  view_file_type : text;
};
type CallbackStrategy = record {
  token : Token;
  callback : func (Token) -> (
      record { token : opt Token; body : vec nat8 },
    ) query;
};
type CanisterMeta = record {
  web : opt text;
  burn_address : text;
  twitter : opt text;
  owners : vec text;
  super_admin : vec text;
  description : opt text;
  collection_name : text;
  distrikt : opt text;
  detailpage : opt text;
  keywords : opt text;
  collaborators : vec text;
  discord : opt text;
  blurb : opt text;
  brief : opt text;
  license : text;
  royalty : vec record { text; nat16 };
  dscvr : opt text;
  max_number_of_nfts_to_mint : nat16;
};
type CommonError = variant {
  InsufficientBalance : text;
  InvalidToken : text;
  Unauthorized : text;
  Other : text;
};
type EditRawAsset = record {
  raw_asset_index : nat;
  thumbnail_bytes : opt vec nat8;
  asset_bytes : opt vec nat8;
  chunk : opt nat;
  asset_file_name : opt text;
  asset_file_type : opt text;
  thumb_file_name : opt text;
  thumb_file_type : opt text;
};
type Event = record {
  description : text;
  timestamp : nat32;
  actor_principal : text;
  event_type : text;
};
type FunctionCallResult = variant { ok : text; err : text };
type FunctionCallResultFloat64 = variant { ok : float64; err : text };
type FunctionCallResultNat = variant { ok : nat; err : text };
type HttpRequest = record {
  url : text;
  method : text;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  upgrade : opt bool;
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type Listing = record { locked : opt int; seller : principal; price : nat64 };
type ManyMintResult = variant { ok : vec text; err : text };
type Metadata = variant {
  fungible : MetadataRecord;
  nonfungible : MetadataNonfungible;
};
type MetadataNonfungible = record { metadata : opt text };
type MetadataRecord = record {
  decimals : nat8;
  ownerAccount : text;
  metadata : opt vec nat8;
  name : text;
  symbol : text;
};
type MetadataResponse = variant { ok : Metadata; err : CommonError };
type Nft = record {
  display_index : nat16;
  metadata_index : nat16;
  thumbnail_url : text;
  asset_url : text;
  nft_index : nat16;
};
type NftForMinting = record {
  display_index : nat;
  to_address : text;
  metadata_index : nat16;
  thumbnail_url : text;
  asset_url : text;
  nft_index : opt nat;
};
type RawAssetForUpload = record {
  raw_asset_index : opt nat;
  thumbnail_bytes : opt vec nat8;
  asset_bytes : vec nat8;
  chunk : opt nat;
  asset_file_name : text;
  asset_file_type : text;
  thumb_file_name : opt text;
  thumb_file_type : opt text;
};
type RevealCategory = record {
  condition_index : nat16;
  category_name : text;
  priority : nat16;
};
type SetCanister = record {
  web : opt text;
  twitter : opt text;
  collection : opt vec nat8;
  banner : opt vec nat8;
  description : opt text;
  collection_name : opt text;
  distrikt : opt text;
  detailpage : opt text;
  keywords : opt text;
  discord : opt text;
  blurb : opt text;
  brief : opt text;
  license : opt text;
  dscvr : opt text;
  avatar : opt vec nat8;
};
type StreamingCallbackHttpResponse = record {
  token : opt Token;
  body : vec nat8;
};
type StreamingStrategy = variant { Callback : CallbackStrategy };
type Token = record { arbitrary_data : text };
type TokensExtResult = variant {
  ok : vec record { nat32; opt Listing; opt vec nat8 };
  err : CommonError;
};
type TransferError = variant {
  InsufficientAllowance : text;
  CannotNotify : text;
  InsufficientBalance : text;
  InvalidToken : text;
  Rejected : text;
  Unauthorized : text;
  Other : text;
};
type TransferEvent = record {
  to_address : text;
  from_address : text;
  timestamp : nat64;
  transfer_type : text;
  nft_index : nat16;
};
type TransferRequest = record {
  to : User;
  token : text;
  notify : bool;
  from : User;
  memo : vec nat8;
  subaccount : opt vec nat8;
  nonce : opt nat;
  amount : nat;
};
type TransferResponse = variant { ok : nat; err : TransferError };
type UpdateMetadataNumber = record {
  trait_name : text;
  trait_type : text;
  trait_value : float64;
  trait_format : text;
  nft_index : nat;
};
type UpdateMetadataText = record {
  trait_name : text;
  trait_type : text;
  trait_value : text;
  trait_format : text;
  nft_index : nat;
};
type User = variant { "principal" : principal; address : text };
service : () -> {
  add_collection_collaborator : (text) -> (FunctionCallResult);
  add_collection_owner : (text) -> (FunctionCallResult);
  add_collection_super_admin : (text) -> (FunctionCallResult);
  add_royalty_address : (record { text; nat }) -> (FunctionCallResult);
  admin_transfer : (nat, text) -> (FunctionCallResult);
  airdrop : (vec text, opt vec nat) -> (FunctionCallResult);
  burn_nft : (nat) -> (FunctionCallResult);
  compute_rarity : () -> (FunctionCallResult);
  create_full_asset_display : (AssetDisplayForUpload) -> (
      FunctionCallResultNat,
    );
  create_many_full_asset_displays : (vec AssetDisplayForUpload) -> (
      FunctionCallResult,
    );
  create_new_asset_view : (AssetView) -> (FunctionCallResult);
  create_reveal_category : (RevealCategory) -> (FunctionCallResult);
  edit_nft : (Nft) -> (FunctionCallResult);
  edit_raw_asset : (EditRawAsset) -> (FunctionCallResult);
  getTokens : () -> (vec record { nat32; Metadata }) query;
  get_all_nfts : () -> (vec record { nat; opt Nft }) query;
  get_asset_view_names : () -> (opt vec text) query;
  get_canister_metadata : () -> (opt CanisterMeta) query;
  get_collection_collaborators : () -> (vec text) query;
  get_collection_owners : () -> (vec text) query;
  get_collection_super_admin : () -> (vec text) query;
  get_cycles : () -> (nat64) query;
  get_dynamic_traits_number : (nat, text) -> (FunctionCallResultFloat64) query;
  get_dynamic_traits_text : (nat, text) -> (FunctionCallResult) query;
  get_event : (nat64) -> (opt Event) query;
  get_nft : (nat) -> (opt Nft) query;
  get_owner : (nat) -> (opt text) query;
  get_rarity_data : (text) -> (vec record { nat16; float64 }) query;
  get_rarity_score : (nat, text) -> (FunctionCallResultFloat64) query;
  get_raw_asset_index : (nat, text, text) -> (FunctionCallResultNat) query;
  get_raw_assets : () -> (vec record { nat16; text; text; text; text }) query;
  get_registry : () -> (vec record { nat; text }) query;
  get_reveal_category_names : () -> (opt vec text) query;
  get_royalty_addresses : () -> (vec record { text; nat }) query;
  get_static_traits_number : (nat, text) -> (FunctionCallResultFloat64) query;
  get_static_traits_text : (nat, text) -> (FunctionCallResult) query;
  get_token_id : (nat) -> (FunctionCallResult) query;
  get_tokens : (text) -> (opt vec nat) query;
  get_transaction : (nat64) -> (opt TransferEvent) query;
  get_unique_holders : () -> (nat) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback : (Token) -> (
      StreamingCallbackHttpResponse,
    ) query;
  listings : () -> (vec text) query;
  metadata : (text) -> (MetadataResponse) query;
  mint_many_NFTs : (vec NftForMinting) -> (ManyMintResult);
  mint_nft : (NftForMinting) -> (FunctionCallResult);
  remove_asset_view : (text) -> (FunctionCallResult);
  remove_collection_collaborator : (text) -> (FunctionCallResult);
  remove_collection_owner : (text) -> (FunctionCallResult);
  remove_collection_super_admin : (text) -> (FunctionCallResult);
  remove_raw_asset : (nat) -> (FunctionCallResult);
  remove_royalty_address : (text) -> (FunctionCallResult);
  set_burn_address : (text) -> (FunctionCallResult);
  set_canister_metadata : (SetCanister) -> (FunctionCallResult);
  set_collection_name : (text) -> (FunctionCallResult);
  set_license : (text) -> (FunctionCallResult);
  set_max_number_of_nfts_to_mint : (nat) -> (FunctionCallResult);
  set_new_creator_royalty : (vec record { text; nat }) -> (FunctionCallResult);
  set_number_trait : (UpdateMetadataNumber) -> (FunctionCallResult);
  set_text_trait : (UpdateMetadataText) -> (FunctionCallResult);
  tokens_ext : (text) -> (TokensExtResult) query;
  transfer : (TransferRequest) -> (TransferResponse);
  trigger_reveal_off : (text) -> (FunctionCallResult);
  trigger_reveal_on : (text) -> (FunctionCallResult);
  unmint_nft : (nat) -> (FunctionCallResult);
  upload_raw_asset : (RawAssetForUpload) -> (FunctionCallResultNat);
  who_am_i : () -> (text) query;
}